// source: DBStruct.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.db.PBPersonalfeature', null, global);
goog.exportSymbol('proto.db.PBPersonalfeatureVec', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db.PBPersonalfeature = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db.PBPersonalfeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.db.PBPersonalfeature.displayName = 'proto.db.PBPersonalfeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db.PBPersonalfeatureVec = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.db.PBPersonalfeatureVec.repeatedFields_, null);
};
goog.inherits(proto.db.PBPersonalfeatureVec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.db.PBPersonalfeatureVec.displayName = 'proto.db.PBPersonalfeatureVec';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.db.PBPersonalfeature.prototype.toObject = function(opt_includeInstance) {
        return proto.db.PBPersonalfeature.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.db.PBPersonalfeature} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.db.PBPersonalfeature.toObject = function(includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, 0),
            cardid: jspb.Message.getFieldWithDefault(msg, 2, ""),
            facefeaturepicture: msg.getFacefeaturepicture_asB64(),
            facefeatureresult: msg.getFacefeatureresult_asB64(),
            facefeatureangle: jspb.Message.getFieldWithDefault(msg, 5, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db.PBPersonalfeature}
 */
proto.db.PBPersonalfeature.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.db.PBPersonalfeature;
    return proto.db.PBPersonalfeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db.PBPersonalfeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db.PBPersonalfeature}
 */
proto.db.PBPersonalfeature.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setCardid(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setFacefeaturepicture(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setFacefeatureresult(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setFacefeatureangle(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db.PBPersonalfeature.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.db.PBPersonalfeature.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db.PBPersonalfeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db.PBPersonalfeature.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getId();
    if (f !== 0) {
        writer.writeUint64(
            1,
            f
        );
    }
    f = message.getCardid();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getFacefeaturepicture_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            3,
            f
        );
    }
    f = message.getFacefeatureresult_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            4,
            f
        );
    }
    f = message.getFacefeatureangle();
    if (f.length > 0) {
        writer.writeString(
            5,
            f
        );
    }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.db.PBPersonalfeature.prototype.getId = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.db.PBPersonalfeature} returns this
 */
proto.db.PBPersonalfeature.prototype.setId = function(value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string cardID = 2;
 * @return {string}
 */
proto.db.PBPersonalfeature.prototype.getCardid = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.db.PBPersonalfeature} returns this
 */
proto.db.PBPersonalfeature.prototype.setCardid = function(value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes faceFeaturePicture = 3;
 * @return {!(string|Uint8Array)}
 */
proto.db.PBPersonalfeature.prototype.getFacefeaturepicture = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes faceFeaturePicture = 3;
 * This is a type-conversion wrapper around `getFacefeaturepicture()`
 * @return {string}
 */
proto.db.PBPersonalfeature.prototype.getFacefeaturepicture_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getFacefeaturepicture()));
};


/**
 * optional bytes faceFeaturePicture = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFacefeaturepicture()`
 * @return {!Uint8Array}
 */
proto.db.PBPersonalfeature.prototype.getFacefeaturepicture_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getFacefeaturepicture()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db.PBPersonalfeature} returns this
 */
proto.db.PBPersonalfeature.prototype.setFacefeaturepicture = function(value) {
    return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes faceFeatureResult = 4;
 * @return {!(string|Uint8Array)}
 */
proto.db.PBPersonalfeature.prototype.getFacefeatureresult = function() {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes faceFeatureResult = 4;
 * This is a type-conversion wrapper around `getFacefeatureresult()`
 * @return {string}
 */
proto.db.PBPersonalfeature.prototype.getFacefeatureresult_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getFacefeatureresult()));
};


/**
 * optional bytes faceFeatureResult = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFacefeatureresult()`
 * @return {!Uint8Array}
 */
proto.db.PBPersonalfeature.prototype.getFacefeatureresult_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getFacefeatureresult()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db.PBPersonalfeature} returns this
 */
proto.db.PBPersonalfeature.prototype.setFacefeatureresult = function(value) {
    return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string faceFeatureAngle = 5;
 * @return {string}
 */
proto.db.PBPersonalfeature.prototype.getFacefeatureangle = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.db.PBPersonalfeature} returns this
 */
proto.db.PBPersonalfeature.prototype.setFacefeatureangle = function(value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db.PBPersonalfeatureVec.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.db.PBPersonalfeatureVec.prototype.toObject = function(opt_includeInstance) {
        return proto.db.PBPersonalfeatureVec.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.db.PBPersonalfeatureVec} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.db.PBPersonalfeatureVec.toObject = function(includeInstance, msg) {
        var f, obj = {
            personalfeaturesList: jspb.Message.toObjectList(msg.getPersonalfeaturesList(),
                proto.db.PBPersonalfeature.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db.PBPersonalfeatureVec}
 */
proto.db.PBPersonalfeatureVec.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.db.PBPersonalfeatureVec;
    return proto.db.PBPersonalfeatureVec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db.PBPersonalfeatureVec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db.PBPersonalfeatureVec}
 */
proto.db.PBPersonalfeatureVec.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.db.PBPersonalfeature;
                reader.readMessage(value,proto.db.PBPersonalfeature.deserializeBinaryFromReader);
                msg.addPersonalfeatures(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db.PBPersonalfeatureVec.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.db.PBPersonalfeatureVec.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db.PBPersonalfeatureVec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db.PBPersonalfeatureVec.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getPersonalfeaturesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.db.PBPersonalfeature.serializeBinaryToWriter
        );
    }
};


/**
 * repeated PBPersonalfeature personalfeatures = 1;
 * @return {!Array<!proto.db.PBPersonalfeature>}
 */
proto.db.PBPersonalfeatureVec.prototype.getPersonalfeaturesList = function() {
    return /** @type{!Array<!proto.db.PBPersonalfeature>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.db.PBPersonalfeature, 1));
};


/**
 * @param {!Array<!proto.db.PBPersonalfeature>} value
 * @return {!proto.db.PBPersonalfeatureVec} returns this
 */
proto.db.PBPersonalfeatureVec.prototype.setPersonalfeaturesList = function(value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.db.PBPersonalfeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.db.PBPersonalfeature}
 */
proto.db.PBPersonalfeatureVec.prototype.addPersonalfeatures = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.db.PBPersonalfeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db.PBPersonalfeatureVec} returns this
 */
proto.db.PBPersonalfeatureVec.prototype.clearPersonalfeaturesList = function() {
    return this.setPersonalfeaturesList([]);
};


goog.object.extend(exports, proto.db);
