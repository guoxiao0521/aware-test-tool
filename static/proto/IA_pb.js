// source: IA.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
goog.object.extend(proto, base_pb);
goog.exportSymbol('proto.VIA.PBBBObject', null, global);
goog.exportSymbol('proto.VIA.PBCarTopNum', null, global);
goog.exportSymbol('proto.VIA.PBContainerNum', null, global);
goog.exportSymbol('proto.VIA.PBEmptyContainerRetInfo', null, global);
goog.exportSymbol('proto.VIA.PBFaceObjInfo', null, global);
goog.exportSymbol('proto.VIA.PBFaceRetInfo', null, global);
goog.exportSymbol('proto.VIA.PBIARetInfo', null, global);
goog.exportSymbol('proto.VIA.PBLicencePlate', null, global);
goog.exportSymbol('proto.VIA.PBLicencePlateExtInfo', null, global);
goog.exportSymbol('proto.VIA.PBMeterInfo', null, global);
goog.exportSymbol('proto.VIA.PBObjectDescribeInfo', null, global);
goog.exportSymbol('proto.VIA.PBObjectsDetectionInfo', null, global);
goog.exportSymbol('proto.VIA.PBObstacleInfo', null, global);
goog.exportSymbol('proto.VIA.PBPicPath', null, global);
goog.exportSymbol('proto.VIA.PBStitchPic', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBPicPath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VIA.PBPicPath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBPicPath.displayName = 'proto.VIA.PBPicPath';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBBBObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VIA.PBBBObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBBBObject.displayName = 'proto.VIA.PBBBObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBContainerNum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VIA.PBContainerNum.repeatedFields_, null);
};
goog.inherits(proto.VIA.PBContainerNum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBContainerNum.displayName = 'proto.VIA.PBContainerNum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBCarTopNum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VIA.PBCarTopNum.repeatedFields_, null);
};
goog.inherits(proto.VIA.PBCarTopNum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBCarTopNum.displayName = 'proto.VIA.PBCarTopNum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBObstacleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VIA.PBObstacleInfo.repeatedFields_, null);
};
goog.inherits(proto.VIA.PBObstacleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBObstacleInfo.displayName = 'proto.VIA.PBObstacleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBStitchPic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VIA.PBStitchPic.repeatedFields_, null);
};
goog.inherits(proto.VIA.PBStitchPic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBStitchPic.displayName = 'proto.VIA.PBStitchPic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBLicencePlateExtInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VIA.PBLicencePlateExtInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBLicencePlateExtInfo.displayName = 'proto.VIA.PBLicencePlateExtInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBLicencePlate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VIA.PBLicencePlate.repeatedFields_, null);
};
goog.inherits(proto.VIA.PBLicencePlate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBLicencePlate.displayName = 'proto.VIA.PBLicencePlate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBEmptyContainerRetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VIA.PBEmptyContainerRetInfo.repeatedFields_, null);
};
goog.inherits(proto.VIA.PBEmptyContainerRetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBEmptyContainerRetInfo.displayName = 'proto.VIA.PBEmptyContainerRetInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBObjectDescribeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VIA.PBObjectDescribeInfo.repeatedFields_, null);
};
goog.inherits(proto.VIA.PBObjectDescribeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBObjectDescribeInfo.displayName = 'proto.VIA.PBObjectDescribeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBObjectsDetectionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VIA.PBObjectsDetectionInfo.repeatedFields_, null);
};
goog.inherits(proto.VIA.PBObjectsDetectionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBObjectsDetectionInfo.displayName = 'proto.VIA.PBObjectsDetectionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBFaceObjInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VIA.PBFaceObjInfo.repeatedFields_, null);
};
goog.inherits(proto.VIA.PBFaceObjInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBFaceObjInfo.displayName = 'proto.VIA.PBFaceObjInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBFaceRetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VIA.PBFaceRetInfo.repeatedFields_, null);
};
goog.inherits(proto.VIA.PBFaceRetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBFaceRetInfo.displayName = 'proto.VIA.PBFaceRetInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBMeterInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VIA.PBMeterInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBMeterInfo.displayName = 'proto.VIA.PBMeterInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VIA.PBIARetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VIA.PBIARetInfo.repeatedFields_, null);
};
goog.inherits(proto.VIA.PBIARetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VIA.PBIARetInfo.displayName = 'proto.VIA.PBIARetInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBPicPath.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBPicPath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBPicPath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBPicPath.toObject = function(includeInstance, msg) {
  var f, obj = {
    presetid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    camid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    imgpath: jspb.Message.getFieldWithDefault(msg, 3, ""),
    details: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBPicPath}
 */
proto.VIA.PBPicPath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBPicPath;
  return proto.VIA.PBPicPath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBPicPath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBPicPath}
 */
proto.VIA.PBPicPath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPresetid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCamid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgpath(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBPicPath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBPicPath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBPicPath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBPicPath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPresetid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCamid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getImgpath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDetails();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional uint64 presetId = 1;
 * @return {number}
 */
proto.VIA.PBPicPath.prototype.getPresetid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBPicPath} returns this
 */
proto.VIA.PBPicPath.prototype.setPresetid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 camId = 2;
 * @return {number}
 */
proto.VIA.PBPicPath.prototype.getCamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBPicPath} returns this
 */
proto.VIA.PBPicPath.prototype.setCamid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string imgPath = 3;
 * @return {string}
 */
proto.VIA.PBPicPath.prototype.getImgpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBPicPath} returns this
 */
proto.VIA.PBPicPath.prototype.setImgpath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 details = 4;
 * @return {number}
 */
proto.VIA.PBPicPath.prototype.getDetails = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBPicPath} returns this
 */
proto.VIA.PBPicPath.prototype.setDetails = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBBBObject.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBBBObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBBBObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBBBObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    objecttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    objbb: (f = msg.getObjbb()) && base_pb.SBBox.toObject(includeInstance, f),
    objectlabeldescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    conf: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBBBObject}
 */
proto.VIA.PBBBObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBBBObject;
  return proto.VIA.PBBBObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBBBObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBBBObject}
 */
proto.VIA.PBBBObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjecttype(value);
      break;
    case 2:
      var value = new base_pb.SBBox;
      reader.readMessage(value,base_pb.SBBox.deserializeBinaryFromReader);
      msg.setObjbb(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectlabeldescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBBBObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBBBObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBBBObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBBBObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjecttype();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getObjbb();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_pb.SBBox.serializeBinaryToWriter
    );
  }
  f = message.getObjectlabeldescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConf();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional uint32 ObjectType = 1;
 * @return {number}
 */
proto.VIA.PBBBObject.prototype.getObjecttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBBBObject} returns this
 */
proto.VIA.PBBBObject.prototype.setObjecttype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SBBox ObjBB = 2;
 * @return {?proto.SBBox}
 */
proto.VIA.PBBBObject.prototype.getObjbb = function() {
  return /** @type{?proto.SBBox} */ (
    jspb.Message.getWrapperField(this, base_pb.SBBox, 2));
};


/**
 * @param {?proto.SBBox|undefined} value
 * @return {!proto.VIA.PBBBObject} returns this
*/
proto.VIA.PBBBObject.prototype.setObjbb = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VIA.PBBBObject} returns this
 */
proto.VIA.PBBBObject.prototype.clearObjbb = function() {
  return this.setObjbb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VIA.PBBBObject.prototype.hasObjbb = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string ObjectLabelDescription = 3;
 * @return {string}
 */
proto.VIA.PBBBObject.prototype.getObjectlabeldescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBBBObject} returns this
 */
proto.VIA.PBBBObject.prototype.setObjectlabeldescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float conf = 4;
 * @return {number}
 */
proto.VIA.PBBBObject.prototype.getConf = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBBBObject} returns this
 */
proto.VIA.PBBBObject.prototype.setConf = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VIA.PBContainerNum.repeatedFields_ = [8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBContainerNum.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBContainerNum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBContainerNum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBContainerNum.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getFieldWithDefault(msg, 1, 0),
    no: jspb.Message.getFieldWithDefault(msg, 2, ""),
    noconfid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    iso: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isoconfid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    res: jspb.Message.getFieldWithDefault(msg, 7, ""),
    picpathsList: jspb.Message.toObjectList(msg.getPicpathsList(),
    proto.VIA.PBPicPath.toObject, includeInstance),
    ruleList: jspb.Message.toObjectList(msg.getRuleList(),
    base_pb.PBRule.toObject, includeInstance),
    note: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBContainerNum}
 */
proto.VIA.PBContainerNum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBContainerNum;
  return proto.VIA.PBContainerNum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBContainerNum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBContainerNum}
 */
proto.VIA.PBContainerNum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNoconfid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIso(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsoconfid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRes(value);
      break;
    case 8:
      var value = new proto.VIA.PBPicPath;
      reader.readMessage(value,proto.VIA.PBPicPath.deserializeBinaryFromReader);
      msg.addPicpaths(value);
      break;
    case 9:
      var value = new base_pb.PBRule;
      reader.readMessage(value,base_pb.PBRule.deserializeBinaryFromReader);
      msg.addRule(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBContainerNum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBContainerNum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBContainerNum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBContainerNum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErr();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNoconfid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIso();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsoconfid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getRes();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPicpathsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.VIA.PBPicPath.serializeBinaryToWriter
    );
  }
  f = message.getRuleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      base_pb.PBRule.serializeBinaryToWriter
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional int32 err = 1;
 * @return {number}
 */
proto.VIA.PBContainerNum.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBContainerNum} returns this
 */
proto.VIA.PBContainerNum.prototype.setErr = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string no = 2;
 * @return {string}
 */
proto.VIA.PBContainerNum.prototype.getNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBContainerNum} returns this
 */
proto.VIA.PBContainerNum.prototype.setNo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 noConfid = 3;
 * @return {number}
 */
proto.VIA.PBContainerNum.prototype.getNoconfid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBContainerNum} returns this
 */
proto.VIA.PBContainerNum.prototype.setNoconfid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string iso = 4;
 * @return {string}
 */
proto.VIA.PBContainerNum.prototype.getIso = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBContainerNum} returns this
 */
proto.VIA.PBContainerNum.prototype.setIso = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 isoConfid = 5;
 * @return {number}
 */
proto.VIA.PBContainerNum.prototype.getIsoconfid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBContainerNum} returns this
 */
proto.VIA.PBContainerNum.prototype.setIsoconfid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 type = 6;
 * @return {number}
 */
proto.VIA.PBContainerNum.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBContainerNum} returns this
 */
proto.VIA.PBContainerNum.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string res = 7;
 * @return {string}
 */
proto.VIA.PBContainerNum.prototype.getRes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBContainerNum} returns this
 */
proto.VIA.PBContainerNum.prototype.setRes = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated PBPicPath PicPaths = 8;
 * @return {!Array<!proto.VIA.PBPicPath>}
 */
proto.VIA.PBContainerNum.prototype.getPicpathsList = function() {
  return /** @type{!Array<!proto.VIA.PBPicPath>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBPicPath, 8));
};


/**
 * @param {!Array<!proto.VIA.PBPicPath>} value
 * @return {!proto.VIA.PBContainerNum} returns this
*/
proto.VIA.PBContainerNum.prototype.setPicpathsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.VIA.PBPicPath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBPicPath}
 */
proto.VIA.PBContainerNum.prototype.addPicpaths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.VIA.PBPicPath, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBContainerNum} returns this
 */
proto.VIA.PBContainerNum.prototype.clearPicpathsList = function() {
  return this.setPicpathsList([]);
};


/**
 * repeated PBRule rule = 9;
 * @return {!Array<!proto.PBRule>}
 */
proto.VIA.PBContainerNum.prototype.getRuleList = function() {
  return /** @type{!Array<!proto.PBRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_pb.PBRule, 9));
};


/**
 * @param {!Array<!proto.PBRule>} value
 * @return {!proto.VIA.PBContainerNum} returns this
*/
proto.VIA.PBContainerNum.prototype.setRuleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.PBRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PBRule}
 */
proto.VIA.PBContainerNum.prototype.addRule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.PBRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBContainerNum} returns this
 */
proto.VIA.PBContainerNum.prototype.clearRuleList = function() {
  return this.setRuleList([]);
};


/**
 * optional string note = 10;
 * @return {string}
 */
proto.VIA.PBContainerNum.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBContainerNum} returns this
 */
proto.VIA.PBContainerNum.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VIA.PBCarTopNum.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBCarTopNum.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBCarTopNum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBCarTopNum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBCarTopNum.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getFieldWithDefault(msg, 1, 0),
    no: jspb.Message.getFieldWithDefault(msg, 2, ""),
    res: jspb.Message.getFieldWithDefault(msg, 3, ""),
    picpathsList: jspb.Message.toObjectList(msg.getPicpathsList(),
    proto.VIA.PBPicPath.toObject, includeInstance),
    ruleList: jspb.Message.toObjectList(msg.getRuleList(),
    base_pb.PBRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBCarTopNum}
 */
proto.VIA.PBCarTopNum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBCarTopNum;
  return proto.VIA.PBCarTopNum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBCarTopNum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBCarTopNum}
 */
proto.VIA.PBCarTopNum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRes(value);
      break;
    case 4:
      var value = new proto.VIA.PBPicPath;
      reader.readMessage(value,proto.VIA.PBPicPath.deserializeBinaryFromReader);
      msg.addPicpaths(value);
      break;
    case 5:
      var value = new base_pb.PBRule;
      reader.readMessage(value,base_pb.PBRule.deserializeBinaryFromReader);
      msg.addRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBCarTopNum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBCarTopNum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBCarTopNum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBCarTopNum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErr();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRes();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPicpathsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.VIA.PBPicPath.serializeBinaryToWriter
    );
  }
  f = message.getRuleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      base_pb.PBRule.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 err = 1;
 * @return {number}
 */
proto.VIA.PBCarTopNum.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBCarTopNum} returns this
 */
proto.VIA.PBCarTopNum.prototype.setErr = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string no = 2;
 * @return {string}
 */
proto.VIA.PBCarTopNum.prototype.getNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBCarTopNum} returns this
 */
proto.VIA.PBCarTopNum.prototype.setNo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string res = 3;
 * @return {string}
 */
proto.VIA.PBCarTopNum.prototype.getRes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBCarTopNum} returns this
 */
proto.VIA.PBCarTopNum.prototype.setRes = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated PBPicPath PicPaths = 4;
 * @return {!Array<!proto.VIA.PBPicPath>}
 */
proto.VIA.PBCarTopNum.prototype.getPicpathsList = function() {
  return /** @type{!Array<!proto.VIA.PBPicPath>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBPicPath, 4));
};


/**
 * @param {!Array<!proto.VIA.PBPicPath>} value
 * @return {!proto.VIA.PBCarTopNum} returns this
*/
proto.VIA.PBCarTopNum.prototype.setPicpathsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.VIA.PBPicPath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBPicPath}
 */
proto.VIA.PBCarTopNum.prototype.addPicpaths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.VIA.PBPicPath, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBCarTopNum} returns this
 */
proto.VIA.PBCarTopNum.prototype.clearPicpathsList = function() {
  return this.setPicpathsList([]);
};


/**
 * repeated PBRule rule = 5;
 * @return {!Array<!proto.PBRule>}
 */
proto.VIA.PBCarTopNum.prototype.getRuleList = function() {
  return /** @type{!Array<!proto.PBRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_pb.PBRule, 5));
};


/**
 * @param {!Array<!proto.PBRule>} value
 * @return {!proto.VIA.PBCarTopNum} returns this
*/
proto.VIA.PBCarTopNum.prototype.setRuleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.PBRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PBRule}
 */
proto.VIA.PBCarTopNum.prototype.addRule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.PBRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBCarTopNum} returns this
 */
proto.VIA.PBCarTopNum.prototype.clearRuleList = function() {
  return this.setRuleList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VIA.PBObstacleInfo.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBObstacleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBObstacleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBObstacleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBObstacleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dis: jspb.Message.getFieldWithDefault(msg, 2, 0),
    objbb: (f = msg.getObjbb()) && proto.VIA.PBBBObject.toObject(includeInstance, f),
    cameraalarm: jspb.Message.getFieldWithDefault(msg, 4, 0),
    radaralarm: jspb.Message.getFieldWithDefault(msg, 5, 0),
    alarmtypesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    ruleList: jspb.Message.toObjectList(msg.getRuleList(),
    base_pb.PBRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBObstacleInfo}
 */
proto.VIA.PBObstacleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBObstacleInfo;
  return proto.VIA.PBObstacleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBObstacleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBObstacleInfo}
 */
proto.VIA.PBObstacleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDis(value);
      break;
    case 3:
      var value = new proto.VIA.PBBBObject;
      reader.readMessage(value,proto.VIA.PBBBObject.deserializeBinaryFromReader);
      msg.setObjbb(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCameraalarm(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRadaralarm(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setAlarmtypesList(value);
      break;
    case 7:
      var value = new base_pb.PBRule;
      reader.readMessage(value,base_pb.PBRule.deserializeBinaryFromReader);
      msg.addRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBObstacleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBObstacleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBObstacleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBObstacleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErr();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDis();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getObjbb();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.VIA.PBBBObject.serializeBinaryToWriter
    );
  }
  f = message.getCameraalarm();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getRadaralarm();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAlarmtypesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
  f = message.getRuleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      base_pb.PBRule.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 err = 1;
 * @return {number}
 */
proto.VIA.PBObstacleInfo.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBObstacleInfo} returns this
 */
proto.VIA.PBObstacleInfo.prototype.setErr = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 dis = 2;
 * @return {number}
 */
proto.VIA.PBObstacleInfo.prototype.getDis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBObstacleInfo} returns this
 */
proto.VIA.PBObstacleInfo.prototype.setDis = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional PBBBObject ObjBB = 3;
 * @return {?proto.VIA.PBBBObject}
 */
proto.VIA.PBObstacleInfo.prototype.getObjbb = function() {
  return /** @type{?proto.VIA.PBBBObject} */ (
    jspb.Message.getWrapperField(this, proto.VIA.PBBBObject, 3));
};


/**
 * @param {?proto.VIA.PBBBObject|undefined} value
 * @return {!proto.VIA.PBObstacleInfo} returns this
*/
proto.VIA.PBObstacleInfo.prototype.setObjbb = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VIA.PBObstacleInfo} returns this
 */
proto.VIA.PBObstacleInfo.prototype.clearObjbb = function() {
  return this.setObjbb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VIA.PBObstacleInfo.prototype.hasObjbb = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 cameraAlarm = 4;
 * @return {number}
 */
proto.VIA.PBObstacleInfo.prototype.getCameraalarm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBObstacleInfo} returns this
 */
proto.VIA.PBObstacleInfo.prototype.setCameraalarm = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 radarAlarm = 5;
 * @return {number}
 */
proto.VIA.PBObstacleInfo.prototype.getRadaralarm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBObstacleInfo} returns this
 */
proto.VIA.PBObstacleInfo.prototype.setRadaralarm = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated int32 AlarmTypes = 6;
 * @return {!Array<number>}
 */
proto.VIA.PBObstacleInfo.prototype.getAlarmtypesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.VIA.PBObstacleInfo} returns this
 */
proto.VIA.PBObstacleInfo.prototype.setAlarmtypesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBObstacleInfo} returns this
 */
proto.VIA.PBObstacleInfo.prototype.addAlarmtypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBObstacleInfo} returns this
 */
proto.VIA.PBObstacleInfo.prototype.clearAlarmtypesList = function() {
  return this.setAlarmtypesList([]);
};


/**
 * repeated PBRule rule = 7;
 * @return {!Array<!proto.PBRule>}
 */
proto.VIA.PBObstacleInfo.prototype.getRuleList = function() {
  return /** @type{!Array<!proto.PBRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_pb.PBRule, 7));
};


/**
 * @param {!Array<!proto.PBRule>} value
 * @return {!proto.VIA.PBObstacleInfo} returns this
*/
proto.VIA.PBObstacleInfo.prototype.setRuleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.PBRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PBRule}
 */
proto.VIA.PBObstacleInfo.prototype.addRule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.PBRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBObstacleInfo} returns this
 */
proto.VIA.PBObstacleInfo.prototype.clearRuleList = function() {
  return this.setRuleList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VIA.PBStitchPic.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBStitchPic.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBStitchPic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBStitchPic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBStitchPic.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reserved: jspb.Message.getFieldWithDefault(msg, 2, ""),
    picpathsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBStitchPic}
 */
proto.VIA.PBStitchPic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBStitchPic;
  return proto.VIA.PBStitchPic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBStitchPic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBStitchPic}
 */
proto.VIA.PBStitchPic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReserved(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPicpaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBStitchPic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBStitchPic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBStitchPic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBStitchPic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErr();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReserved();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPicpathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional int32 err = 1;
 * @return {number}
 */
proto.VIA.PBStitchPic.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBStitchPic} returns this
 */
proto.VIA.PBStitchPic.prototype.setErr = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string reserved = 2;
 * @return {string}
 */
proto.VIA.PBStitchPic.prototype.getReserved = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBStitchPic} returns this
 */
proto.VIA.PBStitchPic.prototype.setReserved = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string PicPaths = 3;
 * @return {!Array<string>}
 */
proto.VIA.PBStitchPic.prototype.getPicpathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.VIA.PBStitchPic} returns this
 */
proto.VIA.PBStitchPic.prototype.setPicpathsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBStitchPic} returns this
 */
proto.VIA.PBStitchPic.prototype.addPicpaths = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBStitchPic} returns this
 */
proto.VIA.PBStitchPic.prototype.clearPicpathsList = function() {
  return this.setPicpathsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBLicencePlateExtInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBLicencePlateExtInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBLicencePlateExtInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBLicencePlateExtInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    extinfotpye: jspb.Message.getFieldWithDefault(msg, 1, 0),
    extinfo: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBLicencePlateExtInfo}
 */
proto.VIA.PBLicencePlateExtInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBLicencePlateExtInfo;
  return proto.VIA.PBLicencePlateExtInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBLicencePlateExtInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBLicencePlateExtInfo}
 */
proto.VIA.PBLicencePlateExtInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExtinfotpye(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBLicencePlateExtInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBLicencePlateExtInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBLicencePlateExtInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBLicencePlateExtInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExtinfotpye();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getExtinfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 ExtInfoTpye = 1;
 * @return {number}
 */
proto.VIA.PBLicencePlateExtInfo.prototype.getExtinfotpye = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBLicencePlateExtInfo} returns this
 */
proto.VIA.PBLicencePlateExtInfo.prototype.setExtinfotpye = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ExtInfo = 2;
 * @return {string}
 */
proto.VIA.PBLicencePlateExtInfo.prototype.getExtinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBLicencePlateExtInfo} returns this
 */
proto.VIA.PBLicencePlateExtInfo.prototype.setExtinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VIA.PBLicencePlate.repeatedFields_ = [8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBLicencePlate.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBLicencePlate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBLicencePlate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBLicencePlate.toObject = function(includeInstance, msg) {
  var f, obj = {
    licenceplate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    conf: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    color: jspb.Message.getFieldWithDefault(msg, 3, 0),
    objbb: (f = msg.getObjbb()) && proto.VIA.PBBBObject.toObject(includeInstance, f),
    err: jspb.Message.getFieldWithDefault(msg, 5, 0),
    filepath: jspb.Message.getFieldWithDefault(msg, 6, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 7, ""),
    ruleList: jspb.Message.toObjectList(msg.getRuleList(),
    base_pb.PBRule.toObject, includeInstance),
    extinfoList: jspb.Message.toObjectList(msg.getExtinfoList(),
    proto.VIA.PBLicencePlateExtInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBLicencePlate}
 */
proto.VIA.PBLicencePlate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBLicencePlate;
  return proto.VIA.PBLicencePlate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBLicencePlate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBLicencePlate}
 */
proto.VIA.PBLicencePlate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicenceplate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConf(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColor(value);
      break;
    case 4:
      var value = new proto.VIA.PBBBObject;
      reader.readMessage(value,proto.VIA.PBBBObject.deserializeBinaryFromReader);
      msg.setObjbb(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilepath(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 8:
      var value = new base_pb.PBRule;
      reader.readMessage(value,base_pb.PBRule.deserializeBinaryFromReader);
      msg.addRule(value);
      break;
    case 9:
      var value = new proto.VIA.PBLicencePlateExtInfo;
      reader.readMessage(value,proto.VIA.PBLicencePlateExtInfo.deserializeBinaryFromReader);
      msg.addExtinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBLicencePlate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBLicencePlate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBLicencePlate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBLicencePlate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLicenceplate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConf();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getColor();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getObjbb();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.VIA.PBBBObject.serializeBinaryToWriter
    );
  }
  f = message.getErr();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFilepath();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRuleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      base_pb.PBRule.serializeBinaryToWriter
    );
  }
  f = message.getExtinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.VIA.PBLicencePlateExtInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string licencePlate = 1;
 * @return {string}
 */
proto.VIA.PBLicencePlate.prototype.getLicenceplate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBLicencePlate} returns this
 */
proto.VIA.PBLicencePlate.prototype.setLicenceplate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float conf = 2;
 * @return {number}
 */
proto.VIA.PBLicencePlate.prototype.getConf = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBLicencePlate} returns this
 */
proto.VIA.PBLicencePlate.prototype.setConf = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 color = 3;
 * @return {number}
 */
proto.VIA.PBLicencePlate.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBLicencePlate} returns this
 */
proto.VIA.PBLicencePlate.prototype.setColor = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional PBBBObject ObjBB = 4;
 * @return {?proto.VIA.PBBBObject}
 */
proto.VIA.PBLicencePlate.prototype.getObjbb = function() {
  return /** @type{?proto.VIA.PBBBObject} */ (
    jspb.Message.getWrapperField(this, proto.VIA.PBBBObject, 4));
};


/**
 * @param {?proto.VIA.PBBBObject|undefined} value
 * @return {!proto.VIA.PBLicencePlate} returns this
*/
proto.VIA.PBLicencePlate.prototype.setObjbb = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VIA.PBLicencePlate} returns this
 */
proto.VIA.PBLicencePlate.prototype.clearObjbb = function() {
  return this.setObjbb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VIA.PBLicencePlate.prototype.hasObjbb = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 err = 5;
 * @return {number}
 */
proto.VIA.PBLicencePlate.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBLicencePlate} returns this
 */
proto.VIA.PBLicencePlate.prototype.setErr = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string filePath = 6;
 * @return {string}
 */
proto.VIA.PBLicencePlate.prototype.getFilepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBLicencePlate} returns this
 */
proto.VIA.PBLicencePlate.prototype.setFilepath = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string owner = 7;
 * @return {string}
 */
proto.VIA.PBLicencePlate.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBLicencePlate} returns this
 */
proto.VIA.PBLicencePlate.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated PBRule rule = 8;
 * @return {!Array<!proto.PBRule>}
 */
proto.VIA.PBLicencePlate.prototype.getRuleList = function() {
  return /** @type{!Array<!proto.PBRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_pb.PBRule, 8));
};


/**
 * @param {!Array<!proto.PBRule>} value
 * @return {!proto.VIA.PBLicencePlate} returns this
*/
proto.VIA.PBLicencePlate.prototype.setRuleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.PBRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PBRule}
 */
proto.VIA.PBLicencePlate.prototype.addRule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.PBRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBLicencePlate} returns this
 */
proto.VIA.PBLicencePlate.prototype.clearRuleList = function() {
  return this.setRuleList([]);
};


/**
 * repeated PBLicencePlateExtInfo ExtInfo = 9;
 * @return {!Array<!proto.VIA.PBLicencePlateExtInfo>}
 */
proto.VIA.PBLicencePlate.prototype.getExtinfoList = function() {
  return /** @type{!Array<!proto.VIA.PBLicencePlateExtInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBLicencePlateExtInfo, 9));
};


/**
 * @param {!Array<!proto.VIA.PBLicencePlateExtInfo>} value
 * @return {!proto.VIA.PBLicencePlate} returns this
*/
proto.VIA.PBLicencePlate.prototype.setExtinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.VIA.PBLicencePlateExtInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBLicencePlateExtInfo}
 */
proto.VIA.PBLicencePlate.prototype.addExtinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.VIA.PBLicencePlateExtInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBLicencePlate} returns this
 */
proto.VIA.PBLicencePlate.prototype.clearExtinfoList = function() {
  return this.setExtinfoList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VIA.PBEmptyContainerRetInfo.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBEmptyContainerRetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBEmptyContainerRetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBEmptyContainerRetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBEmptyContainerRetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    isempty: jspb.Message.getFieldWithDefault(msg, 1, 0),
    err: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ruleList: jspb.Message.toObjectList(msg.getRuleList(),
    base_pb.PBRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBEmptyContainerRetInfo}
 */
proto.VIA.PBEmptyContainerRetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBEmptyContainerRetInfo;
  return proto.VIA.PBEmptyContainerRetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBEmptyContainerRetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBEmptyContainerRetInfo}
 */
proto.VIA.PBEmptyContainerRetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsempty(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    case 8:
      var value = new base_pb.PBRule;
      reader.readMessage(value,base_pb.PBRule.deserializeBinaryFromReader);
      msg.addRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBEmptyContainerRetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBEmptyContainerRetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBEmptyContainerRetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBEmptyContainerRetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsempty();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErr();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRuleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      base_pb.PBRule.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 isempty = 1;
 * @return {number}
 */
proto.VIA.PBEmptyContainerRetInfo.prototype.getIsempty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBEmptyContainerRetInfo} returns this
 */
proto.VIA.PBEmptyContainerRetInfo.prototype.setIsempty = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 err = 2;
 * @return {number}
 */
proto.VIA.PBEmptyContainerRetInfo.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBEmptyContainerRetInfo} returns this
 */
proto.VIA.PBEmptyContainerRetInfo.prototype.setErr = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated PBRule rule = 8;
 * @return {!Array<!proto.PBRule>}
 */
proto.VIA.PBEmptyContainerRetInfo.prototype.getRuleList = function() {
  return /** @type{!Array<!proto.PBRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_pb.PBRule, 8));
};


/**
 * @param {!Array<!proto.PBRule>} value
 * @return {!proto.VIA.PBEmptyContainerRetInfo} returns this
*/
proto.VIA.PBEmptyContainerRetInfo.prototype.setRuleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.PBRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PBRule}
 */
proto.VIA.PBEmptyContainerRetInfo.prototype.addRule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.PBRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBEmptyContainerRetInfo} returns this
 */
proto.VIA.PBEmptyContainerRetInfo.prototype.clearRuleList = function() {
  return this.setRuleList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VIA.PBObjectDescribeInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBObjectDescribeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBObjectDescribeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBObjectDescribeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBObjectDescribeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    note: jspb.Message.getFieldWithDefault(msg, 1, ""),
    object: (f = msg.getObject()) && proto.VIA.PBBBObject.toObject(includeInstance, f),
    ruleList: jspb.Message.toObjectList(msg.getRuleList(),
    base_pb.PBRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBObjectDescribeInfo}
 */
proto.VIA.PBObjectDescribeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBObjectDescribeInfo;
  return proto.VIA.PBObjectDescribeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBObjectDescribeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBObjectDescribeInfo}
 */
proto.VIA.PBObjectDescribeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 2:
      var value = new proto.VIA.PBBBObject;
      reader.readMessage(value,proto.VIA.PBBBObject.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 3:
      var value = new base_pb.PBRule;
      reader.readMessage(value,base_pb.PBRule.deserializeBinaryFromReader);
      msg.addRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBObjectDescribeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBObjectDescribeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBObjectDescribeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBObjectDescribeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VIA.PBBBObject.serializeBinaryToWriter
    );
  }
  f = message.getRuleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      base_pb.PBRule.serializeBinaryToWriter
    );
  }
};


/**
 * optional string note = 1;
 * @return {string}
 */
proto.VIA.PBObjectDescribeInfo.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBObjectDescribeInfo} returns this
 */
proto.VIA.PBObjectDescribeInfo.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PBBBObject Object = 2;
 * @return {?proto.VIA.PBBBObject}
 */
proto.VIA.PBObjectDescribeInfo.prototype.getObject = function() {
  return /** @type{?proto.VIA.PBBBObject} */ (
    jspb.Message.getWrapperField(this, proto.VIA.PBBBObject, 2));
};


/**
 * @param {?proto.VIA.PBBBObject|undefined} value
 * @return {!proto.VIA.PBObjectDescribeInfo} returns this
*/
proto.VIA.PBObjectDescribeInfo.prototype.setObject = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VIA.PBObjectDescribeInfo} returns this
 */
proto.VIA.PBObjectDescribeInfo.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VIA.PBObjectDescribeInfo.prototype.hasObject = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PBRule rule = 3;
 * @return {!Array<!proto.PBRule>}
 */
proto.VIA.PBObjectDescribeInfo.prototype.getRuleList = function() {
  return /** @type{!Array<!proto.PBRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_pb.PBRule, 3));
};


/**
 * @param {!Array<!proto.PBRule>} value
 * @return {!proto.VIA.PBObjectDescribeInfo} returns this
*/
proto.VIA.PBObjectDescribeInfo.prototype.setRuleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.PBRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PBRule}
 */
proto.VIA.PBObjectDescribeInfo.prototype.addRule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.PBRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBObjectDescribeInfo} returns this
 */
proto.VIA.PBObjectDescribeInfo.prototype.clearRuleList = function() {
  return this.setRuleList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VIA.PBObjectsDetectionInfo.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBObjectsDetectionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBObjectsDetectionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBObjectsDetectionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBObjectsDetectionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    picpath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    err: jspb.Message.getFieldWithDefault(msg, 2, 0),
    objectsList: jspb.Message.toObjectList(msg.getObjectsList(),
    proto.VIA.PBBBObject.toObject, includeInstance),
    objectsdescribeList: jspb.Message.toObjectList(msg.getObjectsdescribeList(),
    proto.VIA.PBObjectDescribeInfo.toObject, includeInstance),
    camid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBObjectsDetectionInfo}
 */
proto.VIA.PBObjectsDetectionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBObjectsDetectionInfo;
  return proto.VIA.PBObjectsDetectionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBObjectsDetectionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBObjectsDetectionInfo}
 */
proto.VIA.PBObjectsDetectionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPicpath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    case 3:
      var value = new proto.VIA.PBBBObject;
      reader.readMessage(value,proto.VIA.PBBBObject.deserializeBinaryFromReader);
      msg.addObjects(value);
      break;
    case 4:
      var value = new proto.VIA.PBObjectDescribeInfo;
      reader.readMessage(value,proto.VIA.PBObjectDescribeInfo.deserializeBinaryFromReader);
      msg.addObjectsdescribe(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBObjectsDetectionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBObjectsDetectionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBObjectsDetectionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBObjectsDetectionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPicpath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getErr();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.VIA.PBBBObject.serializeBinaryToWriter
    );
  }
  f = message.getObjectsdescribeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.VIA.PBObjectDescribeInfo.serializeBinaryToWriter
    );
  }
  f = message.getCamid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string PicPath = 1;
 * @return {string}
 */
proto.VIA.PBObjectsDetectionInfo.prototype.getPicpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBObjectsDetectionInfo} returns this
 */
proto.VIA.PBObjectsDetectionInfo.prototype.setPicpath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 err = 2;
 * @return {number}
 */
proto.VIA.PBObjectsDetectionInfo.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBObjectsDetectionInfo} returns this
 */
proto.VIA.PBObjectsDetectionInfo.prototype.setErr = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated PBBBObject Objects = 3;
 * @return {!Array<!proto.VIA.PBBBObject>}
 */
proto.VIA.PBObjectsDetectionInfo.prototype.getObjectsList = function() {
  return /** @type{!Array<!proto.VIA.PBBBObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBBBObject, 3));
};


/**
 * @param {!Array<!proto.VIA.PBBBObject>} value
 * @return {!proto.VIA.PBObjectsDetectionInfo} returns this
*/
proto.VIA.PBObjectsDetectionInfo.prototype.setObjectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.VIA.PBBBObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBBBObject}
 */
proto.VIA.PBObjectsDetectionInfo.prototype.addObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.VIA.PBBBObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBObjectsDetectionInfo} returns this
 */
proto.VIA.PBObjectsDetectionInfo.prototype.clearObjectsList = function() {
  return this.setObjectsList([]);
};


/**
 * repeated PBObjectDescribeInfo ObjectsDescribe = 4;
 * @return {!Array<!proto.VIA.PBObjectDescribeInfo>}
 */
proto.VIA.PBObjectsDetectionInfo.prototype.getObjectsdescribeList = function() {
  return /** @type{!Array<!proto.VIA.PBObjectDescribeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBObjectDescribeInfo, 4));
};


/**
 * @param {!Array<!proto.VIA.PBObjectDescribeInfo>} value
 * @return {!proto.VIA.PBObjectsDetectionInfo} returns this
*/
proto.VIA.PBObjectsDetectionInfo.prototype.setObjectsdescribeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.VIA.PBObjectDescribeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBObjectDescribeInfo}
 */
proto.VIA.PBObjectsDetectionInfo.prototype.addObjectsdescribe = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.VIA.PBObjectDescribeInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBObjectsDetectionInfo} returns this
 */
proto.VIA.PBObjectsDetectionInfo.prototype.clearObjectsdescribeList = function() {
  return this.setObjectsdescribeList([]);
};


/**
 * optional uint64 camId = 5;
 * @return {number}
 */
proto.VIA.PBObjectsDetectionInfo.prototype.getCamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBObjectsDetectionInfo} returns this
 */
proto.VIA.PBObjectsDetectionInfo.prototype.setCamid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VIA.PBFaceObjInfo.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBFaceObjInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBFaceObjInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBFaceObjInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBFaceObjInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    objid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bbobj: (f = msg.getBbobj()) && proto.VIA.PBBBObject.toObject(includeInstance, f),
    objstate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cardid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    faceobjpath: jspb.Message.getFieldWithDefault(msg, 5, ""),
    alarm: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    personname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    ruleList: jspb.Message.toObjectList(msg.getRuleList(),
    base_pb.PBRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBFaceObjInfo}
 */
proto.VIA.PBFaceObjInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBFaceObjInfo;
  return proto.VIA.PBFaceObjInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBFaceObjInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBFaceObjInfo}
 */
proto.VIA.PBFaceObjInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setObjid(value);
      break;
    case 2:
      var value = new proto.VIA.PBBBObject;
      reader.readMessage(value,proto.VIA.PBBBObject.deserializeBinaryFromReader);
      msg.setBbobj(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setObjstate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceobjpath(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlarm(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPersonname(value);
      break;
    case 8:
      var value = new base_pb.PBRule;
      reader.readMessage(value,base_pb.PBRule.deserializeBinaryFromReader);
      msg.addRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBFaceObjInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBFaceObjInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBFaceObjInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBFaceObjInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBbobj();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VIA.PBBBObject.serializeBinaryToWriter
    );
  }
  f = message.getObjstate();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCardid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFaceobjpath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAlarm();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getPersonname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRuleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      base_pb.PBRule.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 objid = 1;
 * @return {number}
 */
proto.VIA.PBFaceObjInfo.prototype.getObjid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBFaceObjInfo} returns this
 */
proto.VIA.PBFaceObjInfo.prototype.setObjid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PBBBObject BBObj = 2;
 * @return {?proto.VIA.PBBBObject}
 */
proto.VIA.PBFaceObjInfo.prototype.getBbobj = function() {
  return /** @type{?proto.VIA.PBBBObject} */ (
    jspb.Message.getWrapperField(this, proto.VIA.PBBBObject, 2));
};


/**
 * @param {?proto.VIA.PBBBObject|undefined} value
 * @return {!proto.VIA.PBFaceObjInfo} returns this
*/
proto.VIA.PBFaceObjInfo.prototype.setBbobj = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VIA.PBFaceObjInfo} returns this
 */
proto.VIA.PBFaceObjInfo.prototype.clearBbobj = function() {
  return this.setBbobj(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VIA.PBFaceObjInfo.prototype.hasBbobj = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 objState = 3;
 * @return {number}
 */
proto.VIA.PBFaceObjInfo.prototype.getObjstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBFaceObjInfo} returns this
 */
proto.VIA.PBFaceObjInfo.prototype.setObjstate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string cardId = 4;
 * @return {string}
 */
proto.VIA.PBFaceObjInfo.prototype.getCardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBFaceObjInfo} returns this
 */
proto.VIA.PBFaceObjInfo.prototype.setCardid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string faceobjPath = 5;
 * @return {string}
 */
proto.VIA.PBFaceObjInfo.prototype.getFaceobjpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBFaceObjInfo} returns this
 */
proto.VIA.PBFaceObjInfo.prototype.setFaceobjpath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool alarm = 6;
 * @return {boolean}
 */
proto.VIA.PBFaceObjInfo.prototype.getAlarm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.VIA.PBFaceObjInfo} returns this
 */
proto.VIA.PBFaceObjInfo.prototype.setAlarm = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string personName = 7;
 * @return {string}
 */
proto.VIA.PBFaceObjInfo.prototype.getPersonname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBFaceObjInfo} returns this
 */
proto.VIA.PBFaceObjInfo.prototype.setPersonname = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated PBRule rule = 8;
 * @return {!Array<!proto.PBRule>}
 */
proto.VIA.PBFaceObjInfo.prototype.getRuleList = function() {
  return /** @type{!Array<!proto.PBRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, base_pb.PBRule, 8));
};


/**
 * @param {!Array<!proto.PBRule>} value
 * @return {!proto.VIA.PBFaceObjInfo} returns this
*/
proto.VIA.PBFaceObjInfo.prototype.setRuleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.PBRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PBRule}
 */
proto.VIA.PBFaceObjInfo.prototype.addRule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.PBRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBFaceObjInfo} returns this
 */
proto.VIA.PBFaceObjInfo.prototype.clearRuleList = function() {
  return this.setRuleList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VIA.PBFaceRetInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBFaceRetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBFaceRetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBFaceRetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBFaceRetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    imgpath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    faceobjsList: jspb.Message.toObjectList(msg.getFaceobjsList(),
    proto.VIA.PBFaceObjInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBFaceRetInfo}
 */
proto.VIA.PBFaceRetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBFaceRetInfo;
  return proto.VIA.PBFaceRetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBFaceRetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBFaceRetInfo}
 */
proto.VIA.PBFaceRetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgpath(value);
      break;
    case 2:
      var value = new proto.VIA.PBFaceObjInfo;
      reader.readMessage(value,proto.VIA.PBFaceObjInfo.deserializeBinaryFromReader);
      msg.addFaceobjs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBFaceRetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBFaceRetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBFaceRetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBFaceRetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImgpath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFaceobjsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.VIA.PBFaceObjInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string imgPath = 1;
 * @return {string}
 */
proto.VIA.PBFaceRetInfo.prototype.getImgpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.VIA.PBFaceRetInfo} returns this
 */
proto.VIA.PBFaceRetInfo.prototype.setImgpath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PBFaceObjInfo faceObjs = 2;
 * @return {!Array<!proto.VIA.PBFaceObjInfo>}
 */
proto.VIA.PBFaceRetInfo.prototype.getFaceobjsList = function() {
  return /** @type{!Array<!proto.VIA.PBFaceObjInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBFaceObjInfo, 2));
};


/**
 * @param {!Array<!proto.VIA.PBFaceObjInfo>} value
 * @return {!proto.VIA.PBFaceRetInfo} returns this
*/
proto.VIA.PBFaceRetInfo.prototype.setFaceobjsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.VIA.PBFaceObjInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBFaceObjInfo}
 */
proto.VIA.PBFaceRetInfo.prototype.addFaceobjs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.VIA.PBFaceObjInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBFaceRetInfo} returns this
 */
proto.VIA.PBFaceRetInfo.prototype.clearFaceobjsList = function() {
  return this.setFaceobjsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBMeterInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBMeterInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBMeterInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBMeterInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    degree: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    err: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBMeterInfo}
 */
proto.VIA.PBMeterInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBMeterInfo;
  return proto.VIA.PBMeterInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBMeterInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBMeterInfo}
 */
proto.VIA.PBMeterInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDegree(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBMeterInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBMeterInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBMeterInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBMeterInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDegree();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getErr();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional float degree = 1;
 * @return {number}
 */
proto.VIA.PBMeterInfo.prototype.getDegree = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBMeterInfo} returns this
 */
proto.VIA.PBMeterInfo.prototype.setDegree = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int32 err = 2;
 * @return {number}
 */
proto.VIA.PBMeterInfo.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBMeterInfo} returns this
 */
proto.VIA.PBMeterInfo.prototype.setErr = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VIA.PBIARetInfo.repeatedFields_ = [2,3,4,5,6,7,8,9,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VIA.PBIARetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VIA.PBIARetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VIA.PBIARetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBIARetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    magicnumversion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cartopnumList: jspb.Message.toObjectList(msg.getCartopnumList(),
    proto.VIA.PBCarTopNum.toObject, includeInstance),
    containernumList: jspb.Message.toObjectList(msg.getContainernumList(),
    proto.VIA.PBContainerNum.toObject, includeInstance),
    obstacleinfoList: jspb.Message.toObjectList(msg.getObstacleinfoList(),
    proto.VIA.PBObstacleInfo.toObject, includeInstance),
    stitchpicList: jspb.Message.toObjectList(msg.getStitchpicList(),
    proto.VIA.PBStitchPic.toObject, includeInstance),
    licenceplateList: jspb.Message.toObjectList(msg.getLicenceplateList(),
    proto.VIA.PBLicencePlate.toObject, includeInstance),
    containerretinfoList: jspb.Message.toObjectList(msg.getContainerretinfoList(),
    proto.VIA.PBEmptyContainerRetInfo.toObject, includeInstance),
    dangerflaginfoList: jspb.Message.toObjectList(msg.getDangerflaginfoList(),
    proto.VIA.PBObjectsDetectionInfo.toObject, includeInstance),
    leadsealinfoList: jspb.Message.toObjectList(msg.getLeadsealinfoList(),
    proto.VIA.PBObjectsDetectionInfo.toObject, includeInstance),
    faceretinfoList: jspb.Message.toObjectList(msg.getFaceretinfoList(),
    proto.VIA.PBFaceRetInfo.toObject, includeInstance),
    meterinfoList: jspb.Message.toObjectList(msg.getMeterinfoList(),
    proto.VIA.PBMeterInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VIA.PBIARetInfo}
 */
proto.VIA.PBIARetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VIA.PBIARetInfo;
  return proto.VIA.PBIARetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VIA.PBIARetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VIA.PBIARetInfo}
 */
proto.VIA.PBIARetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMagicnumversion(value);
      break;
    case 2:
      var value = new proto.VIA.PBCarTopNum;
      reader.readMessage(value,proto.VIA.PBCarTopNum.deserializeBinaryFromReader);
      msg.addCartopnum(value);
      break;
    case 3:
      var value = new proto.VIA.PBContainerNum;
      reader.readMessage(value,proto.VIA.PBContainerNum.deserializeBinaryFromReader);
      msg.addContainernum(value);
      break;
    case 4:
      var value = new proto.VIA.PBObstacleInfo;
      reader.readMessage(value,proto.VIA.PBObstacleInfo.deserializeBinaryFromReader);
      msg.addObstacleinfo(value);
      break;
    case 5:
      var value = new proto.VIA.PBStitchPic;
      reader.readMessage(value,proto.VIA.PBStitchPic.deserializeBinaryFromReader);
      msg.addStitchpic(value);
      break;
    case 6:
      var value = new proto.VIA.PBLicencePlate;
      reader.readMessage(value,proto.VIA.PBLicencePlate.deserializeBinaryFromReader);
      msg.addLicenceplate(value);
      break;
    case 7:
      var value = new proto.VIA.PBEmptyContainerRetInfo;
      reader.readMessage(value,proto.VIA.PBEmptyContainerRetInfo.deserializeBinaryFromReader);
      msg.addContainerretinfo(value);
      break;
    case 8:
      var value = new proto.VIA.PBObjectsDetectionInfo;
      reader.readMessage(value,proto.VIA.PBObjectsDetectionInfo.deserializeBinaryFromReader);
      msg.addDangerflaginfo(value);
      break;
    case 9:
      var value = new proto.VIA.PBObjectsDetectionInfo;
      reader.readMessage(value,proto.VIA.PBObjectsDetectionInfo.deserializeBinaryFromReader);
      msg.addLeadsealinfo(value);
      break;
    case 10:
      var value = new proto.VIA.PBFaceRetInfo;
      reader.readMessage(value,proto.VIA.PBFaceRetInfo.deserializeBinaryFromReader);
      msg.addFaceretinfo(value);
      break;
    case 11:
      var value = new proto.VIA.PBMeterInfo;
      reader.readMessage(value,proto.VIA.PBMeterInfo.deserializeBinaryFromReader);
      msg.addMeterinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VIA.PBIARetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VIA.PBIARetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VIA.PBIARetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VIA.PBIARetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMagicnumversion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCartopnumList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.VIA.PBCarTopNum.serializeBinaryToWriter
    );
  }
  f = message.getContainernumList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.VIA.PBContainerNum.serializeBinaryToWriter
    );
  }
  f = message.getObstacleinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.VIA.PBObstacleInfo.serializeBinaryToWriter
    );
  }
  f = message.getStitchpicList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.VIA.PBStitchPic.serializeBinaryToWriter
    );
  }
  f = message.getLicenceplateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.VIA.PBLicencePlate.serializeBinaryToWriter
    );
  }
  f = message.getContainerretinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.VIA.PBEmptyContainerRetInfo.serializeBinaryToWriter
    );
  }
  f = message.getDangerflaginfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.VIA.PBObjectsDetectionInfo.serializeBinaryToWriter
    );
  }
  f = message.getLeadsealinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.VIA.PBObjectsDetectionInfo.serializeBinaryToWriter
    );
  }
  f = message.getFaceretinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.VIA.PBFaceRetInfo.serializeBinaryToWriter
    );
  }
  f = message.getMeterinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.VIA.PBMeterInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 magicNumVersion = 1;
 * @return {number}
 */
proto.VIA.PBIARetInfo.prototype.getMagicnumversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VIA.PBIARetInfo} returns this
 */
proto.VIA.PBIARetInfo.prototype.setMagicnumversion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PBCarTopNum CarTopNum = 2;
 * @return {!Array<!proto.VIA.PBCarTopNum>}
 */
proto.VIA.PBIARetInfo.prototype.getCartopnumList = function() {
  return /** @type{!Array<!proto.VIA.PBCarTopNum>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBCarTopNum, 2));
};


/**
 * @param {!Array<!proto.VIA.PBCarTopNum>} value
 * @return {!proto.VIA.PBIARetInfo} returns this
*/
proto.VIA.PBIARetInfo.prototype.setCartopnumList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.VIA.PBCarTopNum=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBCarTopNum}
 */
proto.VIA.PBIARetInfo.prototype.addCartopnum = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.VIA.PBCarTopNum, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBIARetInfo} returns this
 */
proto.VIA.PBIARetInfo.prototype.clearCartopnumList = function() {
  return this.setCartopnumList([]);
};


/**
 * repeated PBContainerNum ContainerNum = 3;
 * @return {!Array<!proto.VIA.PBContainerNum>}
 */
proto.VIA.PBIARetInfo.prototype.getContainernumList = function() {
  return /** @type{!Array<!proto.VIA.PBContainerNum>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBContainerNum, 3));
};


/**
 * @param {!Array<!proto.VIA.PBContainerNum>} value
 * @return {!proto.VIA.PBIARetInfo} returns this
*/
proto.VIA.PBIARetInfo.prototype.setContainernumList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.VIA.PBContainerNum=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBContainerNum}
 */
proto.VIA.PBIARetInfo.prototype.addContainernum = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.VIA.PBContainerNum, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBIARetInfo} returns this
 */
proto.VIA.PBIARetInfo.prototype.clearContainernumList = function() {
  return this.setContainernumList([]);
};


/**
 * repeated PBObstacleInfo ObstacleInfo = 4;
 * @return {!Array<!proto.VIA.PBObstacleInfo>}
 */
proto.VIA.PBIARetInfo.prototype.getObstacleinfoList = function() {
  return /** @type{!Array<!proto.VIA.PBObstacleInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBObstacleInfo, 4));
};


/**
 * @param {!Array<!proto.VIA.PBObstacleInfo>} value
 * @return {!proto.VIA.PBIARetInfo} returns this
*/
proto.VIA.PBIARetInfo.prototype.setObstacleinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.VIA.PBObstacleInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBObstacleInfo}
 */
proto.VIA.PBIARetInfo.prototype.addObstacleinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.VIA.PBObstacleInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBIARetInfo} returns this
 */
proto.VIA.PBIARetInfo.prototype.clearObstacleinfoList = function() {
  return this.setObstacleinfoList([]);
};


/**
 * repeated PBStitchPic StitchPic = 5;
 * @return {!Array<!proto.VIA.PBStitchPic>}
 */
proto.VIA.PBIARetInfo.prototype.getStitchpicList = function() {
  return /** @type{!Array<!proto.VIA.PBStitchPic>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBStitchPic, 5));
};


/**
 * @param {!Array<!proto.VIA.PBStitchPic>} value
 * @return {!proto.VIA.PBIARetInfo} returns this
*/
proto.VIA.PBIARetInfo.prototype.setStitchpicList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.VIA.PBStitchPic=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBStitchPic}
 */
proto.VIA.PBIARetInfo.prototype.addStitchpic = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.VIA.PBStitchPic, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBIARetInfo} returns this
 */
proto.VIA.PBIARetInfo.prototype.clearStitchpicList = function() {
  return this.setStitchpicList([]);
};


/**
 * repeated PBLicencePlate LicencePlate = 6;
 * @return {!Array<!proto.VIA.PBLicencePlate>}
 */
proto.VIA.PBIARetInfo.prototype.getLicenceplateList = function() {
  return /** @type{!Array<!proto.VIA.PBLicencePlate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBLicencePlate, 6));
};


/**
 * @param {!Array<!proto.VIA.PBLicencePlate>} value
 * @return {!proto.VIA.PBIARetInfo} returns this
*/
proto.VIA.PBIARetInfo.prototype.setLicenceplateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.VIA.PBLicencePlate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBLicencePlate}
 */
proto.VIA.PBIARetInfo.prototype.addLicenceplate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.VIA.PBLicencePlate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBIARetInfo} returns this
 */
proto.VIA.PBIARetInfo.prototype.clearLicenceplateList = function() {
  return this.setLicenceplateList([]);
};


/**
 * repeated PBEmptyContainerRetInfo ContainerRetInfo = 7;
 * @return {!Array<!proto.VIA.PBEmptyContainerRetInfo>}
 */
proto.VIA.PBIARetInfo.prototype.getContainerretinfoList = function() {
  return /** @type{!Array<!proto.VIA.PBEmptyContainerRetInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBEmptyContainerRetInfo, 7));
};


/**
 * @param {!Array<!proto.VIA.PBEmptyContainerRetInfo>} value
 * @return {!proto.VIA.PBIARetInfo} returns this
*/
proto.VIA.PBIARetInfo.prototype.setContainerretinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.VIA.PBEmptyContainerRetInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBEmptyContainerRetInfo}
 */
proto.VIA.PBIARetInfo.prototype.addContainerretinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.VIA.PBEmptyContainerRetInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBIARetInfo} returns this
 */
proto.VIA.PBIARetInfo.prototype.clearContainerretinfoList = function() {
  return this.setContainerretinfoList([]);
};


/**
 * repeated PBObjectsDetectionInfo DangerFlagInfo = 8;
 * @return {!Array<!proto.VIA.PBObjectsDetectionInfo>}
 */
proto.VIA.PBIARetInfo.prototype.getDangerflaginfoList = function() {
  return /** @type{!Array<!proto.VIA.PBObjectsDetectionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBObjectsDetectionInfo, 8));
};


/**
 * @param {!Array<!proto.VIA.PBObjectsDetectionInfo>} value
 * @return {!proto.VIA.PBIARetInfo} returns this
*/
proto.VIA.PBIARetInfo.prototype.setDangerflaginfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.VIA.PBObjectsDetectionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBObjectsDetectionInfo}
 */
proto.VIA.PBIARetInfo.prototype.addDangerflaginfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.VIA.PBObjectsDetectionInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBIARetInfo} returns this
 */
proto.VIA.PBIARetInfo.prototype.clearDangerflaginfoList = function() {
  return this.setDangerflaginfoList([]);
};


/**
 * repeated PBObjectsDetectionInfo LeadSealInfo = 9;
 * @return {!Array<!proto.VIA.PBObjectsDetectionInfo>}
 */
proto.VIA.PBIARetInfo.prototype.getLeadsealinfoList = function() {
  return /** @type{!Array<!proto.VIA.PBObjectsDetectionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBObjectsDetectionInfo, 9));
};


/**
 * @param {!Array<!proto.VIA.PBObjectsDetectionInfo>} value
 * @return {!proto.VIA.PBIARetInfo} returns this
*/
proto.VIA.PBIARetInfo.prototype.setLeadsealinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.VIA.PBObjectsDetectionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBObjectsDetectionInfo}
 */
proto.VIA.PBIARetInfo.prototype.addLeadsealinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.VIA.PBObjectsDetectionInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBIARetInfo} returns this
 */
proto.VIA.PBIARetInfo.prototype.clearLeadsealinfoList = function() {
  return this.setLeadsealinfoList([]);
};


/**
 * repeated PBFaceRetInfo FaceRetInfo = 10;
 * @return {!Array<!proto.VIA.PBFaceRetInfo>}
 */
proto.VIA.PBIARetInfo.prototype.getFaceretinfoList = function() {
  return /** @type{!Array<!proto.VIA.PBFaceRetInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBFaceRetInfo, 10));
};


/**
 * @param {!Array<!proto.VIA.PBFaceRetInfo>} value
 * @return {!proto.VIA.PBIARetInfo} returns this
*/
proto.VIA.PBIARetInfo.prototype.setFaceretinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.VIA.PBFaceRetInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBFaceRetInfo}
 */
proto.VIA.PBIARetInfo.prototype.addFaceretinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.VIA.PBFaceRetInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBIARetInfo} returns this
 */
proto.VIA.PBIARetInfo.prototype.clearFaceretinfoList = function() {
  return this.setFaceretinfoList([]);
};


/**
 * repeated PBMeterInfo MeterInfo = 11;
 * @return {!Array<!proto.VIA.PBMeterInfo>}
 */
proto.VIA.PBIARetInfo.prototype.getMeterinfoList = function() {
  return /** @type{!Array<!proto.VIA.PBMeterInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VIA.PBMeterInfo, 11));
};


/**
 * @param {!Array<!proto.VIA.PBMeterInfo>} value
 * @return {!proto.VIA.PBIARetInfo} returns this
*/
proto.VIA.PBIARetInfo.prototype.setMeterinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.VIA.PBMeterInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VIA.PBMeterInfo}
 */
proto.VIA.PBIARetInfo.prototype.addMeterinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.VIA.PBMeterInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VIA.PBIARetInfo} returns this
 */
proto.VIA.PBIARetInfo.prototype.clearMeterinfoList = function() {
  return this.setMeterinfoList([]);
};


goog.object.extend(exports, proto.VIA);
